@Library('retort-lib') _
def label = "jenkins-${UUID.randomUUID().toString()}"

// Kubernetes의 Service Account명
def ZCP_USERID='myplay00'
def K8S_NAMESPACE='myplay'
def DOCKER_PROJECT='myplay'
def DOCKER_IMAGE="${DOCKER_PROJECT}/myplay-payment"
def DOCKER_VERSION="${BUILD_NUMBER}"
def DEPLOY_PATH='configuration/overlay/dev/myplay-payment'
def DEPLOYMENT='myplay-payment-app-dev'
def REPO_URL="factory-git.cloudzcp.io/myplay/myplay-payment"

timestamps {
    podTemplate(label:label,
        serviceAccount: "zcp-system-sa-${ZCP_USERID}",
        containers: [
            containerTemplate(name: 'maven', image: 'maven:3.6.3-jdk-11-slim', ttyEnabled: true, command: 'cat'),
            containerTemplate(name: 'docker', image: 'docker:17-dind', ttyEnabled: true, command: 'dockerd-entrypoint.sh', privileged: true),
            containerTemplate(name: 'tools', image: 'argoproj/argo-cd-ci-builder:v1.0.0', command: 'cat', ttyEnabled: true),
            containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.18.2', ttyEnabled: true, command: 'cat'),
            containerTemplate(name: 'kustomize', image: 'gauravgaglani/k8s-kustomize:1.1.0', ttyEnabled: true, command: 'cat')
        ],
        volumes: [
            persistentVolumeClaim(mountPath: '/root/.m2', claimName: 'zcp-jenkins-mvn-repo')
        ]) {
    
        node(label) {
            stage('SOURCE CHECKOUT') {
                dir('APP_SRC_WORKSPACE') {
                    checkout scm: [ \
                        $class : 'GitSCM', branches: [[name: '*/master']], \
                        submoduleCfg: [], \
                        userRemoteConfigs: [[url: "https://${REPO_URL}", credentialsId: 'GIT_CREDENTIALS',]] \
                    ]
                }
            }
    
            stage('BUILD') {
                dir('APP_SRC_WORKSPACE') {
                    container('maven') {
                        mavenBuild goal: 'clean package -DskipTests=true -f pom.xml', systemProperties:['maven.repo.local':"/root/.m2/${JOB_NAME}"]
                    }
                }
            }
    
            stage('BUILD DOCKER IMAGE') {
                dir('APP_SRC_WORKSPACE') {
                    container('docker') {
                        dockerCmd.withDockerRegistry([credentialsId:'HARBOR_CREDENTIALS', url:"https://${HARBOR_REGISTRY}"]) {
                            def app = docker.build("${HARBOR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_VERSION}")
                            app.push()
                            app.push("latest")
                        }
                    }
                }
            }

            stage('CONFIG CHECKOUT') {
                dir('CONFIG_SRC_WORKSPACE') {
                    checkout scm
                }
            }
    
            stage('BUILD K8S YAML') {
                dir('CONFIG_SRC_WORKSPACE') {
                    container('kustomize') {
                        sh "kustomize build --load_restrictor none --enable_kyaml=false ${DEPLOY_PATH} > deploy.yaml"
                        echo 'Kubernetes 배포 yaml 생성 내역'
                        sh 'cat deploy.yaml'
                    }
                }
            }
    
            stage('DEPLOY') {
                dir('CONFIG_SRC_WORKSPACE') {
                    container('kubectl') {
                        kubeCmd.apply file: 'deploy.yaml', wait: 300, recoverOnFail: false, namespace: K8S_NAMESPACE
                        sh "kubectl rollout restart deployment ${DEPLOYMENT} -n ${K8S_NAMESPACE} "
                    }
                }
            }
        }
    }
}